{"/about/":{"data":{"":"This is the about page."},"title":"About"},"/docs/reference/":{"data":{"":"Reference of API and parameters that you can use.\nWidget options Verify API "},"title":"Reference"},"/docs/reference/verify-api/":{"data":{"":"","error-codes#Error codes":"In case of errors, error-codes array will contain one or more of integer error codes:\nError code Description 0 No error 1 Other (unknown) error 2 Solution contains duplicates 3 Solution verification error 4 Solution has invalid format 5 Puzzle for this solution has expired 6 Property for this puzzle/solution cannot be found 7 Property and API key’s accounts don’t match 8 Solution has been already verified 9 Maintenance mode (see below) During maintenance mode, Private Captcha still verifies cryptographic solution validity, however, account validity is not verified. If solution is valid, success in response is equal to true, but error-codes contains 9 (maintenance mode error). You can decide yourself if you trust these form submissions.","request#Request":"To verify solutions you need to make a POST request to https://api.privatecaptcha.com/verify with the body of the request being solution field’s contents from your form.\n# an example how that will look like with curl curl -X POST \\ -H \"X-Api-Key: your-api-key-here\" \\ -d \"solution\" \\ https://api.privatecaptcha.com/verify ","response#Response":"Here’s how successful response from /verify endpoint looks like:\n{ \"success\": true, \"challenge_ts\": \"2025-01-13T16:17:27+00:00\", \"hostname\": \"privatecaptcha.com\", \"error-codes\": [] } ℹ️ /verify endpoint returns reCAPTCHA-compatible response. By default it uses reCAPTCHA v2 format. If you need v3 format, pass an additional header X-Captcha-Compat-Version: rcV3. "},"title":"Verify API"},"/docs/reference/widget-options/":{"data":{"":"Here’s the minimal captcha field declaration:\nindex.html\u003cdiv class=\"private-captcha\" data-sitekey=\"abcdef\"\u003e\u003c/div\u003e Private Captcha widget is automatically initialized on all elements with private-captcha class name.","attributes#Attributes":"Apart from the required sitekey attribute, the following optional attributes are supported:\nAttribute Values Description data-start-mode auto, click In auto mode (default) captcha widget starts solving captcha whenever parent form receives focus. data-debug true When set to true, will show widget’s internal state and print debug logs. data-solution-field private-captcha-solution, your value Name of the hidden form field with captcha solution that has to be verified on the server side. data-puzzle-endpoint '' or your value Endpoint to get captcha puzzle (override in case of self-hosting). data-display-mode widget, popup, hidden How captcha widget will be shown. Defaults to widget. When hidden, you need to setup widget callbacks (see below). data-lang en Captcha widget localization. data-styles {valid CSS} Overrides for host variables of the widget’s web component. Notes and examples data-display-mode popup captcha widget appears relative to the first parent that has a class private-captcha-anchor.\ndata-lang data-lang allows you to show widget localization in your own language. Translations are defined in the widget/js/strings.js file. If translation to your language is not there, feel free to contribute it.\ndata-styles data-styles allows you to override some of the widget styles to better fit into your website’s design. Example of override: data-style=\":host { --border-radius: .75rem; }\".\nThe following variables support overrides:\n--dark-color --gray-color --light-color --lighter-color --gray-color --accent-color --extra-spacing --label-spacing --border-radius ","callbacks#Callbacks":"You can set your own Javascript handlers for various lifecycle events.\nCallback Description data-started-callback Captcha started solving the puzzle. data-finished-callback Puzzle has been solved. You can use this callback to enable the form submit button. data-errored-callback Puzzle endpoint is not reachable or puzzle solving has failed. "},"title":"Widget options"},"/docs/tutorials/":{"data":{"":"Here you can find tutorials with code examples that you can copy and paste.\nInstall widget Verify solution "},"title":"Tutorials"},"/docs/tutorials/install-widget/":{"data":{"":"","sample-client-code#Sample client code":"Here’s a minimal, yet functional, example of using widget with your form.\nindex.html\u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003ctitle\u003ePrivate Captcha Example\u003c/title\u003e \u003c!-- required: add/include privatecaptcha script (do NOT host it yourself) --\u003e \u003cscript defer src=\"https://cdn.privatecaptcha.com/widget/js/privatecaptcha.js\"\u003e\u003c/script\u003e \u003c!-- our own callback for when captcha is \"solved\" --\u003e \u003cscript type=\"text/javascript\"\u003e function onCaptchaSolved() { const submitButton = document.querySelector('#formSubmit'); submitButton.disabled = false; } \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cform action='/submit' method=\"POST\"\u003e \u003clabel\u003e Email \u003c/label\u003e \u003c!-- NOTE: by default, captcha solving will start after email field receives focus --\u003e \u003cinput type=\"email\" name=\"email\" placeholder=\"Email address\" required /\u003e \u003c!-- NOTE: required `class` \"private-captcha\" and `data-sitekey` attributes set --\u003e \u003cdiv class=\"private-captcha\" data-sitekey=\"your-sitekey\" data-finished-callback=\"onCaptchaSolved\"\u003e \u003c/div\u003e \u003c!-- NOTE: initially disabled submit button --\u003e \u003cbutton id=\"formSubmit\" type=\"submit\" disabled\u003e Submit \u003c/button\u003e \u003c/form\u003e \u003c/body\u003e \u003c/html\u003e Key things to note:\ncaptcha widget is added inside the form, marked with class private-captcha and has sitekey set using “data” attribute form submit button is enabled only after captcha successfully solves the puzzle (inside our callback onCaptchaSolved()) captcha solving will start only after user started to fill-in the form (default value auto of captcha attribute data-start-mode) ","step-by-step#Step by step":" Create new property Create your property in the dashboard and copy the sitekey from the integration snippet.\nCopy widget snippet Add captcha widget inside your form:\nindex.html\u003cform\u003e \u003c!-- ... ---\u003e \u003cdiv class=\"private-captcha\" data-sitekey=\"your-sitekey\" data-finished-callback=\"your-callback\"\u003e \u003c/div\u003e \u003c!-- ... ---\u003e \u003c/form\u003e Verify solution In your form’s handler on the server, before processing user input, verify solution using Private Captcha API.\ncurl -X POST \\ -H \"X-Api-Key: your-api-key-here\" \\ -d \"solution\" \\ https://api.privatecaptcha.com/verify "},"title":"Install widget"},"/docs/tutorials/verify-solution/":{"data":{"":"Solution verification is done on the server-side, when you are processing the form where captcha widget was installed.","step-by-step#Step by step":" Create an API key API key is a prerequisite for verifying captcha. You can create your Private Captcha API key in the portal.\nCall REST endpoint Go main.gofunc checkSolution(solution, apiKey string) error { req, err := http.NewRequest(\"POST\", \"https://api.privatecaptcha.com/verify\", strings.NewReader(solution)) if err != nil { return err } req.Header.Set(\"X-Api-Key\", apiKey) resp, err := http.DefaultClient.Do(req) if err != nil { return err } defer resp.Body.Close() if resp.StatusCode != http.StatusOK { return errors.New(\"solution is not correct\") } return nil } Check response Parse response and check errors.\n{ \"success\": true, \"challenge_ts\": \"2025-01-13T16:17:27+00:00\", \"hostname\": \"privatecaptcha.com\", \"error-codes\": [] } "},"title":"Verify solution"}}