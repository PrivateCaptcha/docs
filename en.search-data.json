{"/about/":{"data":{"":"This is the about page."},"title":"About"},"/docs/reference/":{"data":{"":"Reference of API and parameters that you can use.\nWidget options Verify API "},"title":"Reference"},"/docs/reference/verify-api/":{"data":{"":"After captcha widget has finished solving puzzle, it adds a hidden form field (defined by data-solution-field attribute).\n\u003cform\u003e \u003c!-- ... --\u003e \u003cinput name=\"private-captcha-solution\" type=\"hidden\" value=\"AAAAAAACAhQEAOiDAAAAAAC...IsoSTgYAAA=\"\u003e \u003c!-- ... --\u003e \u003c/form\u003e When handling form submission on the server-side, this is the field you need to validate using Private Captcha API.","error-codes#Error codes":"In case of errors, error-codes array will contain one or more of integer error codes:\nError code Description 0 No error (shown here for completeness) 1 Other (unknown) error 2 Solution contains duplicates 3 Solution verification error 4 Solution has invalid format 5 Puzzle for this solution has expired 6 Property for this puzzle/solution cannot be found 7 Property and API key’s accounts don’t match 8 Solution has been already verified 9 Maintenance mode (see below) During maintenance mode, Private Captcha still verifies cryptographic solution validity, however, account validity is not verified. If solution is valid, success in response is equal to true, but error-codes contains 9 (maintenance mode error). You can decide yourself if you trust these form submissions.","request#Request":"To verify solutions you need to make a POST request to https://api.privatecaptcha.com/verify with the body of the request being solution field’s contents from your form.\n# an example how that will look like with curl curl -X POST \\ -H \"X-Api-Key: your-api-key-here\" \\ -d \"solution\" \\ https://api.privatecaptcha.com/verify ","response#Response":"Here’s how successful response from /verify endpoint looks like:\n{ \"success\": true, \"challenge_ts\": \"2025-01-13T16:17:27+00:00\", \"hostname\": \"privatecaptcha.com\", \"error-codes\": [] } ℹ️ /verify endpoint returns reCAPTCHA-compatible response. By default it uses reCAPTCHA v2 format. If you need v3 format, pass an additional header X-Captcha-Compat-Version: rcV3. "},"title":"Verify API"},"/docs/reference/widget-options/":{"data":{"":"Here’s the minimal captcha field declaration:\nindex.html\u003cdiv class=\"private-captcha\" data-sitekey=\"abcdef\"\u003e\u003c/div\u003e Private Captcha widget is automatically initialized on all elements with private-captcha class name.","attributes#Attributes":"Apart from the required sitekey attribute, the following optional attributes are supported:\nAttribute Values Description data-start-mode auto, click In auto mode (default) captcha widget starts solving captcha whenever parent form receives focus. data-debug true When set to true, will show widget’s internal state and print debug logs. data-solution-field private-captcha-solution, your value Name of the hidden form field with captcha solution that has to be verified on the server side. data-puzzle-endpoint '' or your value Endpoint to get captcha puzzle (override in case of self-hosting). data-display-mode widget, popup, hidden How captcha widget will be shown. Defaults to widget. When hidden, you need to setup widget callbacks (see below). data-lang en Captcha widget localization. data-styles {valid CSS} Overrides for host variables of the widget’s web component. Notes and examples data-display-mode popup captcha widget appears relative to the first parent that has a class private-captcha-anchor.\ndata-lang data-lang allows you to show widget localization in your own language. Translations are defined in the widget/js/strings.js file. If translation to your language is not there, feel free to contribute it.\ndata-styles data-styles allows you to override some of the widget styles to better fit into your website’s design. Example of override: data-style=\":host { --border-radius: .75rem; }\".\nThe following variables support overrides:\n--dark-color --gray-color --light-color --lighter-color --gray-color --accent-color --extra-spacing --label-spacing --border-radius ","callbacks#Callbacks":"You can set your own Javascript handlers for various lifecycle events.\nCallback Description data-started-callback Captcha started solving the puzzle. data-finished-callback Puzzle has been solved. You can use this callback to enable the form submit button. data-errored-callback Puzzle endpoint is not reachable or puzzle solving has failed. "},"title":"Widget options"},"/docs/tutorials/":{"data":{"":"Here you can find tutorials with code examples that you can copy and paste.\nInstall widget Verify solution "},"title":"Tutorials"},"/docs/tutorials/install-widget/":{"data":{"":"","sample-client-code#Sample client code":"Here’s a minimal, yet functional, example of using widget with your form.\nindex.html\u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003ctitle\u003ePrivate Captcha Example\u003c/title\u003e \u003c!-- required: add/include privatecaptcha script (do NOT host it yourself) --\u003e \u003cscript defer src=\"https://cdn.privatecaptcha.com/widget/js/privatecaptcha.js\"\u003e\u003c/script\u003e \u003c!-- our own callback for when captcha is \"solved\" --\u003e \u003cscript type=\"text/javascript\"\u003e function onCaptchaSolved() { const submitButton = document.querySelector('#formSubmit'); submitButton.disabled = false; } \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cform action='/submit' method=\"POST\"\u003e \u003clabel\u003e Email \u003c/label\u003e \u003c!-- NOTE: by default, captcha solving will start after email field receives focus --\u003e \u003cinput type=\"email\" name=\"email\" placeholder=\"Email address\" required /\u003e \u003c!-- NOTE: required `class` \"private-captcha\" and `data-sitekey` attributes set --\u003e \u003cdiv class=\"private-captcha\" data-sitekey=\"your-sitekey\" data-finished-callback=\"onCaptchaSolved\"\u003e \u003c/div\u003e \u003c!-- NOTE: initially disabled submit button --\u003e \u003cbutton id=\"formSubmit\" type=\"submit\" disabled\u003e Submit \u003c/button\u003e \u003c/form\u003e \u003c/body\u003e \u003c/html\u003e Key things to note:\ncaptcha widget is added inside the form, marked with class private-captcha and has sitekey set using “data” attribute form submit button is enabled only after captcha successfully solves the puzzle (inside our callback onCaptchaSolved()) captcha solving will start only after user started to fill-in the form (default value auto of captcha attribute data-start-mode) ","step-by-step#Step by step":" Create new property Create your property in the dashboard and copy the sitekey from the integration snippet.\nCopy widget snippet Add captcha widget inside your form:\nindex.html\u003cform\u003e \u003c!-- ... ---\u003e \u003cdiv class=\"private-captcha\" data-sitekey=\"your-sitekey\" data-finished-callback=\"your-callback\"\u003e \u003c/div\u003e \u003c!-- ... ---\u003e \u003c/form\u003e Verify solution In your form’s handler on the server, before processing user input, verify solution using Private Captcha API.\ncurl -X POST \\ -H \"X-Api-Key: your-api-key-here\" \\ -d \"solution\" \\ https://api.privatecaptcha.com/verify "},"title":"Install widget"},"/docs/tutorials/local-e2e-test/":{"data":{"":"In this tutorial we will create a simple html form, serve it locally with a simple web-server, then protect using Private Captcha and, finally, verify form submissions. And all this in the comfort of your own computer.","add-captcha-widget-to-the-form#Add captcha widget to the form":"This assumes that you already have an account with Private Captcha. If you don’t, go ahead and create one.\nCreate new property In the dashboard, click “Add new property”\nFor a domain, enter the domain that ngrok generated for us before:\nAfter property is created, we will be presented with the integration snippet:\nAdd captcha widget to the form To integrate the widget, we need to add javascript include for privatecaptcha.js and the widget itself to the form. You can get them from the integration snippet above.\nℹ️ Make sure to use your own sitekey index.html \u003c/style\u003e + \u003cscript defer src=\"https://cdn.privatecaptcha.com/widget/js/privatecaptcha.js\"\u003e\u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv style=\"display: flex; flex: 1 1 0%\"\u003e \u003cform action='/submit' method=\"POST\"\u003e \u003clabel\u003e Email: \u003c/label\u003e \u003cinput type=\"email\" name=\"email\" placeholder=\"Email address\" required /\u003e + \u003cdiv class=\"private-captcha\" data-sitekey=\"xyz\"\u003e\u003c/div\u003e \u003cbutton id=\"formSubmit\" type=\"submit\" disabled\u003e Submit \u003c/button\u003e \u003c/form\u003e \u003c/div\u003e If you did everything correctly, when you refresh the page (and/or restart your server), you will see captcha widget:\n⚠️ Captcha has a strict CORS policy and it will load only on the domain configured during property creation. Therefore you need to open page created by ngrok instead of the localhost:8081 address. However, currently captcha widget is not yet useful as we do not take it into account when submitting the form.","basic-webpage-and-server#Basic webpage and server":" ./ index.html main.go Create a simple page with a form element in the middle of the page.\nindex.html\u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003ctitle\u003ePrivate Captcha Example\u003c/title\u003e \u003cstyle\u003e body { display:flex; flex-direction: column; min-height: 100vh; } form { max-width: 32rem; margin: auto; display: flex; flex-direction: column; gap: 20px; border: 1px #ccc solid; padding: 20px; } \u003c/style\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv style=\"display: flex; flex: 1 1 0%\"\u003e \u003cform action='/submit' method=\"POST\"\u003e \u003clabel\u003e Email: \u003c/label\u003e \u003cinput type=\"email\" name=\"email\" placeholder=\"Email address\" required /\u003e \u003cbutton id=\"formSubmit\" type=\"submit\" disabled\u003e Submit \u003c/button\u003e \u003c/form\u003e \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e And a web-server that will serve it (Go is used here as an example).\nGo main.gopackage main import ( \"log\" \"net/http\" ) func main() { http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) { if r.URL.Path == \"/\" { http.ServeFile(w, r, \"index.html\") return } // Return 404 for any other paths http.NotFound(w, r) }) if err := http.ListenAndServe(\":8081\", nil); err != nil { log.Fatal(err) } } You can run it using go run main.go and open http://localhost:8081/ in the browser.\nHere’s how it looks like in Firefox:\nNow let’s make this form available on the internet (as we need a domain name for captcha widget to work).\nMaking this server available publicly We will use ngrok for this purpose, but you can use any compatible solution, such as CloudFlare Tunnel or even reverse SSH tunnel from your own server.\n# run ngrok to our previously exposed port 8081 ngrok http 8081 This will give you a public domain, in this case, https://27ca-193-138-7-216.ngrok-free.app. You can verify that it’s working by opening it from your terminal.","finale#Finale":"Test your form Now you can finally click “Submit” on your page and see if you get a “green result” in the end.\nNow, if you did everything correct, your property dashboard in portal will also show some activity.\nAnd, if you print verify response to the console, you will get this json:\n{\"success\":true,\"challenge_ts\":\"2025-01-14T11:19:34Z\",\"hostname\":\"27ca-193-138-7-216.ngrok-free.app\"} Full code Congratulations on completing this tutorial! You can find full code in this gist.\nTroubleshooting To access browser logs you can add data-debug=\"true\" attribute to the widget and then see if there are any errors in the console.\nCaptcha verification fails (you see a red page) you opened localhost page instead of page provided by ngrok for deployments, different from privatecaptcha.com, you also need to set data-puzzle-endpoint=\"https://api.your-domain.com/puzzle\" attribute ","integrating-with-private-captcha#Integrating with Private Captcha":"Client-side In our simple web-page, let’s add a JavaScript function to enable the “Submit” button when captcha is solved.\nDiffCode index.html@@ -18,7 +18,13 @@ padding: 20px; } \u003cscript defer src=\"https://cdn.privatecaptcha.com/widget/js/privatecaptcha.js\"\u003e\u003c/script\u003e + \u003cscript type=\"text/javascript\"\u003e + function onCaptchaSolved() { + const submitButton = document.querySelector('#formSubmit'); + submitButton.disabled = false; + } + \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e index.html\u003cscript type=\"text/javascript\"\u003e function onCaptchaSolved() { const submitButton = document.querySelector('#formSubmit'); submitButton.disabled = false; } \u003c/script\u003e and connect this function to the widget itself by adding data-finished-callback attribute:\nindex.html@@ -32,7 +32,7 @@ \u003cform action='/submit' method=\"POST\"\u003e \u003clabel\u003e Email: \u003c/label\u003e \u003cinput type=\"email\" name=\"email\" placeholder=\"Email address\" required /\u003e - \u003cdiv class=\"private-captcha\" data-sitekey=\"xyz\"\u003e\u003c/div\u003e + \u003cdiv class=\"private-captcha\" data-sitekey=\"xyz\" + data-finished-callback=\"onCaptchaSolved\"\u003e\u003c/div\u003e \u003cbutton id=\"formSubmit\" type=\"submit\" disabled\u003e Submit \u003c/button\u003e \u003c/form\u003e \u003c/div\u003e Now client-side should be ready. What is left is only to verify captcha on the server-side.\nServer-side For server-size, we need to add a handler for the form and verify captcha solution.\nCreate a new API key To verify captcha solutions, we need an API key. Head to the portal, open your user’s Settings, then API keys and click “Create new key”.\nAdd code to verify solution To verify solution we need to send a POST request to /verify endpoint and check the result. By default, widget adds an invisible form input with name private-captcha-solution.\nℹ️ Make sure to use your own API key DiffGo main.go@@ -1,11 +1,60 @@ ) +func checkSolution(solution, apiKey string) error { + req, err := http.NewRequest(\"POST\", \"https://api.privatecaptcha.com/verify\", strings.NewReader(solution)) + if err != nil { + return err + } + + req.Header.Set(\"X-Api-Key\", apiKey) + + resp, err := http.DefaultClient.Do(req) + if err != nil { + return err + } + defer resp.Body.Close() + + response := struct { + Success bool `json:\"success\"` + // NOTE: other fields omitted for brevity + }{} + + if err := json.NewDecoder(resp.Body).Decode(\u0026response); err != nil { + return err + } + + if !response.Success { + return errors.New(\"solution is not correct\") + } + + return nil +} + func main() { + http.HandleFunc(\"POST /submit\", func(w http.ResponseWriter, r *http.Request) { + const page = `\u003c!DOCTYPE html\u003e\u003chtml\u003e\u003cbody style=\"background-color: %s;\"\u003e\u003c/body\u003e\u003c/html\u003e` + captchaSolution := r.FormValue(\"private-captcha-solution\") + if err := checkSolution(captchaSolution, \"your-api-key\"); err != nil { + fmt.Fprintf(w, page, \"red\") + return + } + fmt.Fprintf(w, page, \"green\") + }) + http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) { if r.URL.Path == \"/\" { http.ServeFile(w, r, \"index.html\") main.gofunc checkSolution(solution, apiKey string) error { req, err := http.NewRequest(\"POST\", \"https://api.privatecaptcha.com/verify\", strings.NewReader(solution)) if err != nil { return err } req.Header.Set(\"X-Api-Key\", apiKey) resp, err := http.DefaultClient.Do(req) if err != nil { return err } defer resp.Body.Close() response := struct { Success bool `json:\"success\"` // NOTE: other fields omitted for brevity }{} if err := json.NewDecoder(resp.Body).Decode(\u0026response); err != nil { return err } if !response.Success { return errors.New(\"solution is not correct\") } return nil } func main() { http.HandleFunc(\"POST /submit\", func(w http.ResponseWriter, r *http.Request) { const page = `\u003c!DOCTYPE html\u003e\u003chtml\u003e\u003cbody style=\"background-color: %s;\"\u003e\u003c/body\u003e\u003c/html\u003e` captchaSolution := r.FormValue(\"private-captcha-solution\") if err := checkSolution(captchaSolution, \"your-api-key\"); err != nil { fmt.Fprintf(w, page, \"red\") return } fmt.Fprintf(w, page, \"green\") }) // .... } "},"title":"Local end-to-end test"},"/docs/tutorials/verify-solution/":{"data":{"":"Solution verification is done on the server-side, when you are processing the form where captcha widget was installed.","step-by-step#Step by step":" Create an API key API key is a prerequisite for verifying captcha. You can create your Private Captcha API key in the portal.\nCall REST endpoint Go main.gofunc checkSolution(solution, apiKey string) error { req, err := http.NewRequest(\"POST\", \"https://api.privatecaptcha.com/verify\", strings.NewReader(solution)) if err != nil { return err } req.Header.Set(\"X-Api-Key\", apiKey) resp, err := http.DefaultClient.Do(req) if err != nil { return err } defer resp.Body.Close() response := struct { Success bool `json:\"success\"` ErrorCodes []int `json:\"error-codes,omitempty\"` // NOTE: other fields omitted for brevity }{} if err := json.NewDecoder(resp.Body).Decode(\u0026response); err != nil { return err } if !response.Success { return errors.New(\"solution is not correct\") } return nil } Check response Parse response and check errors.\n{ \"success\": true, \"challenge_ts\": \"2025-01-13T16:17:27+00:00\", \"hostname\": \"privatecaptcha.com\", \"error-codes\": [] } "},"title":"Verify solution"}}