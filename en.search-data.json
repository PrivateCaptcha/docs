{"/about/":{"data":{"":"This is the about page."},"title":"About"},"/docs/deployment/":{"data":{"":"Information related to self-hosting topics.\nQuick start Configuration "},"title":"Deployment"},"/docs/deployment/configuration/":{"data":{"":"","environmental-variables#Environmental variables":"Required Variable Example Description STAGE prod Stage is used for building widget js code (e.g. minification) and for separation in logging. PC_PORTAL_BASE_URL portal.yourdomain.com (Sub)domain where you will host PrivateCaptcha portal. PC_API_BASE_URL api.yourdomain.com (Sub)domain where CAPTCHA API (puzzles, verification etc.) will be hosted. PC_CDN_BASE_URL cdn.yourdomain.com (Sub)domain where CDN assets will be hosted (e.g., client-side widget package, pictures, email assets etc.). PC_ADMIN_EMAIL admin@yourdomain.com Email that will be used for admin user to login. Must be valid and functioning. PC_EMAIL_FROM no-reply@yourdomain.com Sender address for various transactional emails (2FA auth, welcome email etc.) PC_POSTGRES postgres://username:pass@postgres:5432/privatecaptcha Postgres connection string for backend DB. You can also specify separate values (see note below). PC_CLICKHOUSE_HOST clickhouse Host (or IP address) where ClickHouse DB is running. PC_CLICKHOUSE_DB privatecaptcha Database for connecting to ClickHouse. PC_CLICKHOUSE_USER captcha Username for connecting to PC_CLICKHOUSE_DB. PC_CLICKHOUSE_PASSWORD qwerty12345 Password for PC_CLICKHOUSE_USER. PC_USER_FINGERPRINT_KEY abcdef... HEX-encoded 64-character string, used as IV value for hashing user fingerprints. PC_API_SALT asdf... String used as salt for creating puzzle signatures. SMTP_ENDPOINT smtp://your.provider.com:587 Endpoint used for sending transactional email. SMTP_USERNAME foobar Username for SMTP_ENDPOINT. SMTP_PASSWORD qwerty12345 Password for SMTP_USERNAME. Note\nInstead of PC_POSTGRES as a connection string, you can specify PC_POSTGRES_HOST, PC_POSTGRES_DB, PC_POSTGRES_USER, PC_POSTGRES_PASSWORD separately.\nOptional Variable Example Description PC_HOST localhost Host where to listen for HTTP connections. PC_PORT 8080 Port where to listen for HTTP connections. PC_LOCAL_ADDRESS localhost:9090 Local “admin” endpoint that hosts Prometheus metrics, manual maintenance jobs triggers and kubernetes liveness/readiness probes. Does not have any auth and must not be exposed publicly. PC_RATE_LIMIT_HEADER X-Real-Ip HTTP header which will contain IP address of the connecting user. Is expected to come from CDN or proxy (e.g., nginx, caddy). If empty, righmost non-private address of X-Forwarded-For will be used. PC_RATE_LIMIT_RPS 1.0 Leak rate per second (float) of default API rate limiter. PC_RATE_LIMIT_BURST 20 Burst of default API rate limiter. PC_CLICKHOUSE_ADMIN captcha_admin Separate username for ClickHouse to run migrations with. If empty, PC_CLICKHOUSE_USER will be used. PC_CLICKHOUSE_ADMIN_PASSWORD qwerty12345 Password for PC_CLICKHOUSE_ADMIN. PC_POSTGRES_ADMIN captcha_admin Separate username for Postgres to run migrations with. If empty, PC_POSTGRES_USER (or PC_POSTGRES) will be used. PC_POSTGRES_ADMIN_PASSWORD qwerty12345 Password for PC_POSTGRES_ADMIN. PC_MAINTENANCE_MODE true Boolean (1, y, true) value if server is in maintenance mode, during which communications with databases are offline, but APIs (and cache) are functional. PC_REGISTRATION_ALLOWED true Boolean (1, y, true) value if this instance of PrivateCaptcha has registration page open. PC_HEALTHCHECK_INTERVAL 60 Integer value that defines how frequently in seconds we perform internal health check of DB instances and http server. Defaults to 5 in prod and 60 in dev. PC_VERBOSE true Boolean (1, y, true) to indicate verbose logging (trace level). Note\n“Default” rate limiter means the one for public APIs (/puzzle, /siteverify and some others). Various other APIs have pre-configured hardcoded limits, compiled in.\nWarning\nIt’s not recommended to modify leak rate configuration unless you really know what you’re doing."},"title":"Configuration"},"/docs/deployment/quickstart/":{"data":{"1-clone-the-self-hosting-repo#1. Clone the self-hosting repo":"","2-create-env-file#2. Create \u003ccode\u003e.env\u003c/code\u003e file":"Quick startPrerequisites Docker installed (optional) Reverse proxy like Caddy or Nginx Domain name yourdomain.com (for local-only installs, use privatecaptcha.local) Transactional email provider with SMTP credentials (for production) At least 2GB of RAM 1. Clone the self-hosting repo Self-hosting repository contains a Docker-based quickstart template.\ngit clone https://github.com/PrivateCaptcha/self-hosting.git private-captcha cd private-captcha 2. Create .env file cp .env.example .env Some notes on environment variables:\nPC_USER_FINGERPRINT_KEY you can generate using openssl rand -hex 64 PC_ADMIN_EMAIL will be used to create actual admin account (see note for local use below) PC_RATE_LIMIT_HEADER should be the header containing actual client IP (comes from your CDN or reverse proxy) You can find full documentation on these and other required environment variables here.\nTips for local use To run Private Captcha only locally, use privatecaptcha.local:8080 instead of yourdomain.com. To make it work, you need to add a few lines to /etc/hosts file:\n127.0.0.1 portal.privatecaptcha.local 127.0.0.1 api.privatecaptcha.local 127.0.0.1 cdn.privatecaptcha.local \u003cbutton class=“hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50” title=“Copy code”\n\u003cdiv class=\"copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4\"\u003e\u003c/div\u003e \u003cdiv class=\"success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4\"\u003e\u003c/div\u003e NOTE: email with .local domain is not a valid RFC-5322 address, so for 2FA code (required for login) you will need to find “two factor code” from docker logs manually","3-optional-expose-port#3. (optional) Expose port":"By default Private Captcha is listening on http://localhost:8080. If you want to use Docker networking for production directly (which is not recommended) instead of reverse proxy like Nginx or Caddy, you can create a compose.override.yml file like this:\nservices: privatecaptcha: ports: - 8080:8080 ","4-navigate-to-the-portal#4. Navigate to the Portal":"Now you can open $PC_PORTAL_BASE_URL (e.g. portal.yourdomain.com or http://portal.privatecaptcha.local) in browser and log in.\nNOTE: For local-only use, when asked for a verification code, you might need to find it in the logs of privatecaptcha container. Search for “two factor code”.","prerequisites#Prerequisites":"","quick-start#Quick start":""},"title":"quickstart"},"/docs/reference/":{"data":{"":"Reference of API and parameters that you can use.\nNote\nAPI is also available here as Swagger / OpenAPI definition.\nWidget options Verify API Captcha JS object Testing EU isolation "},"title":"Reference"},"/docs/reference/captcha-object/":{"data":{"":"Captcha object is available as the window.privateCaptcha.autoWidget or as attached via data-store-variable attribute. It is also passed as the only parameter into all of the callbacks.","methods#Methods":"solution() Returns the found solution. Can be used in callbacks for custom processing of the form.\nExample:\nfunction onCaptchaSolved(widget) { console.log('Found solution:', widget.solution()); } \u003cdiv class=\"private-captcha\" data-sitekey=\"xyz\" data-finished-callback=\"onCaptchaSolved\"\u003e\u003c/div\u003e reset() Resets capcha widget to the initial state. Deletes found solution. Optionally can accept an object with options, that correspond to the data-attributes, that are set on the widget itself. Please mind the name conversion rules for dataset attributes. For popup display mode, reset() will hide the widget.\nExample:\nwindow.privateCaptcha.autoWidget.reset(); // with options window.privateCaptcha.autoWidget.reset({debug: true, displayMode: 'popup'}); execute() Starts solving captcha puzzle, shows widget if needed (e.g. for display style popup). Can be used instead of default handler for forms (make sure not to use input type submit for the button).\nExample:\n\u003cform\u003e \u003cbutton type=\"button\" onclick=\"window.privateCaptcha.autoWidget.execute()\"\u003eSubmit\u003c/button\u003e \u003c/form\u003e "},"title":"Captcha object"},"/docs/reference/eu-isolation/":{"data":{"":"There’s a way to use Private Captcha APIs in such a way that all requests are routed exclusively to our servers in EU locations.\nNote\nPrivate Captcha uses EU-only suppliers so by “servers in EU locations” we don’t mean a US-based company (e.g. AWS) with EU points of presence.\nTo achieve this you need to make 2 changes: one on the frontend and second on the backend.\nTL;DR; version is that you need to replace in your code api.privatecaptcha.com to api.eu.privatecaptcha.com.","backend-changes#Backend changes":"When you verify the form submission on the server side, you need to make POST request to the corresponding EU endpoint: https://api.eu.privatecaptcha.com/siteverify.\ncurl -X POST \\ -H \"X-Api-Key: your-api-key-here\" \\ -d \"solution\" \\ - https://api.privatecaptcha.com/siteverify + https://api.eu.privatecaptcha.com/siteverify ","frontend-changes#Frontend changes":"To make sure captcha widget only talks to EU APIs you need to set a data-puzzle-endpoint to https://api.eu.privatecaptcha.com/puzzle in the widget declaration:\nDiffFull code \u003cdiv class=\"private-captcha\" data-sitekey=\"xyz\" ... + data-puzzle-endpoint=\"https://api.eu.privatecaptcha.com/puzzle\" ... \u003e \u003c/div\u003e \u003cdiv class=\"private-captcha\" data-sitekey=\"xyz\" data-puzzle-endpoint=\"https://api.eu.privatecaptcha.com/puzzle\"\u003e \u003c/div\u003e Note\nThis does not affect the captcha widget Javascript snippet itself which loads from CDN points of presence over the world to decrease latency. No end-user PII is involved.","implications#Implications":"The cost of EU isolation is the potential slowdown of the initial widget initialization, in case the end-user is accessing website geographically far from Europe. In most cases it should not be noticeable to the end-user as most operations happen strictly in the background."},"title":"EU Isolation"},"/docs/reference/testing/":{"data":{"":"There’re 2 main ways how you can keep using Private Captcha for testing of your local website:\nuse a predefined (“dummy”) sitekey allow localhost access for main property in Settings in portal ","testing-with-localhost-access#Testing with localhost access":" Warning\nCaptcha has a strict CORS policy and, by default, it will load only on the domain configured during property creation. Subdomains and localhost access needs to be explicitly allowed.\nIn order to make captcha widget to load on localhost domain, we need to allow it in the settings of the property you just created.\nWorth noting that this is not required if you use the dummy sitekey.","testing-with-predefined-sitekey#Testing with predefined sitekey":"Recommended way to use Private Captcha for development is to use different sitekeys for production and testing. For testing you can use a “dummy” sitekey (aka “test property”): aaaaaaaabbbbccccddddeeeeeeeeeeee. This sitekey does not incur any actual solving “price” (in compute resources) on the frontend and the result always passes verification. Please note that captcha widget still has to be clicked to pass by default, unless you are using data-start-mode=\"auto\" (in which case parent form needs to gain focus).\nClient side This is a sample captcha widget for testing:\n\u003cdiv class=\"private-captcha\" data-sitekey=\"aaaaaaaabbbbccccddddeeeeeeeeeeee\"\u003e \u003c/div\u003e Note\nWidget will show red \"testing\" text to highlight that it’s not for production use once you click it.\nServer side On the server side, once you are using Verify API, all responses will contain { \"success\": true } (“verification passed”) and { \"error-codes\": [\"property-test\"] } (non-empty error codes). Of course, you should be mainly checking success field and error-codes semantics is just to distinguish actual errors.\nSending verify request This is a sample payload for test property, that should always return “success” (please note this is for illustration purposes only as payload can change)\ncurl \\ -X POST \\ -H \"X-Api-Key: your-api-key\" \\ -d \"Aaqqqqq7u8zM3d3u7u7u7u4AAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAA=.AQCBnM2czBK6rlq+l06lXBtIDQH/PFk=.AQIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" \\ https://api.privatecaptcha.com/siteverify And if everything is set up correctly, the output will be\n{\"success\":true,\"error-codes\":[\"property-test\"],\"challenge_ts\":\"0001-01-01T00:00:00Z\",\"hostname\":\"\"} "},"title":"Testing"},"/docs/reference/verify-api/":{"data":{"":" Note\nAPI is also available here as Swagger / OpenAPI definition.\nAfter captcha widget has finished solving the puzzle, it adds a hidden form field with solution (defined by data-solution-field attribute).\n\u003cform\u003e \u003c!-- ... --\u003e \u003cinput name=\"private-captcha-solution\" type=\"hidden\" value=\"AAAAAAACAhQEAOiDAAAAAAC...IsoSTgYAAA=\"\u003e \u003c!-- ... --\u003e \u003c/form\u003e When handling form submission on the server-side, this is the field you need to validate using Private Captcha API.","error-codes#Error codes":" Note\nIf error-codes is not empty, it does not mean that verification failed. See details below.\nerror-codes array can contain one or more of error codes:\nError code Description no-error No error (shown here for completeness) error-other Unspecified error solution-duplicates Solution contains duplicates solution-invalid Solution verification error solution-bad-format Solution has invalid format puzzle-expired Puzzle for this solution has expired property-invalid Property for this puzzle/solution cannot be found property-owner-mismatch Property and API key’s accounts don’t match solution-verified-before Solution has been already verified property-test Test property is used for verification maintenance-mode Maintenance mode (see below) integrity-error Puzzle or solution integrity is compromised Errors during successful verification There are a couple of cases, when success in response will be equal to true (successful verification), but error-codes will not be empty. This is made in order to help you distinguish certain use-cases of captcha (and decide yourself if you trust submissions):\nWhen you’re using a test property, error-codes will contain property-test (but verification will succeed). During maintenance mode, Private Captcha still verifies cryptographic solution validity, however, account validity might not be possible to verify. If solution is valid, success in response is equal to true, but error-codes will contain maintenance-mode. If you configured property to “Accept repeated solutions” (during verification window), verification of repeated solution will cause error-codes to contain solution-verified-before. ","request#Request":"To verify solutions you need to make a POST request to https://api.privatecaptcha.com/siteverify with the body of the request being solution field’s contents from your form.\n# an example how that will look like with curl curl -X POST \\ -H \"X-Api-Key: your-api-key-here\" \\ -d \"solution\" \\ https://api.privatecaptcha.com/siteverify ","response#Response":"Here’s how successful response from /siteverify endpoint looks like:\n{ \"success\": true, \"challenge_ts\": \"2025-01-13T16:17:27+00:00\", \"hostname\": \"privatecaptcha.com\", \"error-codes\": [] } Note\n/siteverify endpoint returns reCAPTCHA-compatible response. By default it uses reCAPTCHA v2 format. If you need v3 format, pass an additional header X-Captcha-Compat-Version: rcV3.\nVerifying captcha Verification status is defined by a single field only: success (boolean) must be equal to true."},"title":"Verify API"},"/docs/reference/widget-options/":{"data":{"":"Here’s the minimal captcha field declaration:\nindex.html\u003cdiv class=\"private-captcha\" data-sitekey=\"abcdef\"\u003e\u003c/div\u003e Private Captcha widget is automatically initialized on all elements with private-captcha class name.","attributes#Attributes":"Apart from the required sitekey data attribute, the following optional attributes are supported:\nAttribute Values Description data-start-mode auto, click In auto mode (default) captcha widget starts solving captcha whenever parent form receives focus. data-debug true When set to true, will show widget’s internal state and print debug logs. data-solution-field private-captcha-solution, your value Name of the hidden form field with captcha solution that has to be verified on the server side. data-puzzle-endpoint '' or your value Endpoint to get captcha puzzle (override in case of self-hosting or EU-isolation). data-display-mode widget, popup, hidden How captcha widget will be shown. Defaults to widget. When hidden, you need to setup widget callbacks (see below). data-lang en Captcha widget localization. data-theme light, dark Widget theme (defaults to light) data-styles {valid CSS} Overrides for host variables of the widget’s web component, on top of theme. data-store-variable {JS variable name} If present, attaches Captcha Object to the html element (helps with multiple widgets on a page) Notes and examples data-display-mode widget is the default display mode of captcha\npopup captcha widget appears relative to the first parent that has a class private-captcha-anchor.\n\u003cform\u003e \u003cdiv class=\"private-captcha-anchor\"\u003e \u003cdiv class=\"private-captcha\" data-display-mode=\"popup\" data-sitekey=\"xyz\"\u003e\u003c/div\u003e \u003c/div\u003e \u003c!-- ... --\u003e \u003cbutton type=\"button\" onclick=\"window.privateCaptcha.autoWidget.execute()\"\u003eClick me!\u003c/button\u003e \u003c/form\u003e Click me! hidden captcha widget is permanently hidden and you need to handle all callbacks yourself. See example.\ndata-lang data-lang allows you to show widget localization in your own language. Translations are defined in the widget/js/strings.js file. If translation to your language is not there, feel free to contribute it.\ndata-theme TIP: Use theme toggle on this website to check how the widget will look like\nlight theme dark theme data-styles data-styles allows you to override some of the widget styles to better fit into your website’s design, on top of data-theme. Example of override: data-style=\"--border-radius: .75rem;\".\nThe following variables support overrides (but in general are not encouraged to change).\nColors:\n--dark-color --gray-color --pie-color --background-color --checkbox-background-color --checkbox-hover-color --accent-color --warn-color Spacing:\n--border-radius --extra-spacing (adds equal distance from sides and between checkbox and label) --label-spacing (“base” distance from checkbox and label) Additionally, you can change the following CSS properties:\ndisplay (defaults to inline-block, set to block together with height: 100%; to “stretch” widget) font-size (defaults to 1rem, change to “scale” widget) Making LARGE widget There’re 2 things you can do: changing font-size scales everything inside the widget and stretching widget itself is done with display attribute (which by default is inline-block).\n\u003cform style=\"width: 500px; height: 160px;\"\u003e \u003cdiv class=\"private-captcha\" style=\"height: 100%\" data-styles=\"display: block; height: 100%; font-size: 24px;\"\u003e \u003c/div\u003e \u003c/form\u003e data-store-variable Captcha object, that is created from the widget configuration, provides a number of APIs.\nIf this is the only captcha widget on a page, you can access this object via window.privateCaptcha.autoWidget.\nHowever, in case of multiple widgets, you can assign this attribute to a variable name and then access it as a field of the HTMLElement.\n\u003cdiv class=\"private-captcha\" data-sitekey=\"xyz\" id=\"pcWidget\" data-store-variable=\"_privateCaptcha\"\u003e\u003c/div\u003e \u003c!-- Used in the onclick --\u003e \u003cbutton type=\"button\" onclick=\"document.getElementById('pcWidget')._privateCaptcha.execute()\"\u003e Submit \u003c/button\u003e ","callbacks#Callbacks":"You can set your own Javascript handlers for various lifecycle events. All callbacks receive a single argument which is the Captcha Object itself.\nCallback Description data-init-callback Widget has received a new puzzle to solve (possibly after previous puzzle expiration). data-started-callback Captcha started solving the puzzle. data-finished-callback Puzzle has been solved. You can use this callback to enable the form submit button. data-errored-callback Puzzle endpoint is not reachable or puzzle solving has failed. Example index.html\u003cform\u003e \u003cdiv class=\"private-captcha\" data-finished-callback=\"onCaptchaSolved\"\u003e \u003c/div\u003e \u003c/form\u003e script.jsfunction onCaptchaSolved(widget) { console.log('Solved!'); } "},"title":"Widget options"},"/docs/tutorials/":{"data":{"":"Here you can find tutorials with code examples that you can copy and paste.\nComplete example Invisible captcha "},"title":"Tutorials"},"/docs/tutorials/complete-example/":{"data":{"":"In this tutorial we will create a simple html form, serve it locally with a simple web-server, then protect using Private Captcha and, finally, verify form submission. And all this in the comfort of your own computer.","add-captcha-widget-to-the-form#Add captcha widget to the form":"This assumes that you already have an account with Private Captcha. If you don’t, go ahead and create one.\nCreate new property In the dashboard, click “Add new property”:\nFor a domain, enter any valid domain (if you used ngrok in the previous step, add the generated domain):\nAfter property is created, we will be presented with the integration snippet:\nAdd captcha widget to the form To integrate the widget, we need to add javascript include for privatecaptcha.js and the widget itself to the form. You can get them from the integration snippet above.\nNote\nMake sure to use your own sitekey\nindex.html \u003c/style\u003e + \u003cscript defer src=\"https://cdn.privatecaptcha.com/widget/js/privatecaptcha.js\"\u003e\u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv style=\"display: flex; flex: 1 1 0%\"\u003e \u003cform action='/submit' method=\"POST\"\u003e \u003clabel\u003e Email: \u003c/label\u003e \u003cinput type=\"email\" name=\"email\" placeholder=\"Email address\" required /\u003e + \u003cdiv class=\"private-captcha\" data-sitekey=\"xyz\"\u003e\u003c/div\u003e \u003cbutton id=\"formSubmit\" type=\"submit\" disabled\u003e Submit \u003c/button\u003e \u003c/form\u003e \u003c/div\u003e If you did everything correctly, when you refresh the page (and/or restart your server), you will see the captcha widget inside your form:\nWarning\nCaptcha has a strict CORS policy and, by default, it will load only on the domain configured during property creation. Subdomains and localhost access needs to be explicitly allowed.\nIn order to make captcha widget to load on localhost domain, we need to allow it in the settings of the property you just created (this is not required if you used ngrok domain).\nHowever, currently captcha widget is not yet particularly useful as we do not take it into account when submitting the form.","basic-webpage-and-server#Basic webpage and server":" ./ index.html main.go Create a simple page with a form element in the middle of the page.\nindex.html\u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003ctitle\u003ePrivate Captcha Example\u003c/title\u003e \u003cstyle\u003e body { display:flex; flex-direction: column; min-height: 100vh; } form { max-width: 32rem; margin: auto; display: flex; flex-direction: column; gap: 20px; border: 1px #ccc solid; padding: 20px; } \u003c/style\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv style=\"display: flex; flex: 1 1 0%\"\u003e \u003cform action='/submit' method=\"POST\"\u003e \u003clabel\u003e Email: \u003c/label\u003e \u003cinput type=\"email\" name=\"email\" placeholder=\"Email address\" required /\u003e \u003cbutton id=\"formSubmit\" type=\"submit\" disabled\u003e Submit \u003c/button\u003e \u003c/form\u003e \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e And a web-server that will serve it (Go is used here as an example).\nGo main.gopackage main import ( \"log\" \"net/http\" ) func main() { http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) { if r.URL.Path == \"/\" { http.ServeFile(w, r, \"index.html\") return } // Return 404 for any other paths http.NotFound(w, r) }) if err := http.ListenAndServe(\":8081\", nil); err != nil { log.Fatal(err) } } You can run it using go run main.go and open http://localhost:8081/ in the browser.\nHere’s how it looks like in Firefox:\n(optional) Making this server available publicly We can use ngrok for this purpose, but you can use any compatible solution, such as CloudFlare Tunnel or even reverse SSH tunnel from your own server.\n# run ngrok to our previously exposed port 8081 ngrok http 8081 This will give you a public domain, in this case, https://27ca-193-138-7-216.ngrok-free.app. You can verify that it’s working by opening it from your terminal.\nYou can use this domain as a property domain below.","finale#Finale":"Test your form Now you can finally click “Submit” on your page and see if you get a “green result” in the end.\nNow, if you did everything correct, your property dashboard in portal will also show some activity.\nAnd, if you print verify response to the console, you will get this json:\n{\"success\":true,\"challenge_ts\":\"2025-01-14T11:19:34Z\",\"hostname\":\"27ca-193-138-7-216.ngrok-free.app\"} Full code Congratulations on completing this tutorial! You can find full code in this gist.\nTroubleshooting To access browser logs you can add data-debug=\"true\" attribute to the widget and then see if there are any errors in the console.\nCaptcha verification fails (you see a red page) localhost was not allowed in the property settings for deployments, different from privatecaptcha.com, you also need to set data-puzzle-endpoint=\"https://api.your-domain.com/puzzle\" attribute ","integrating-with-private-captcha#Integrating with Private Captcha":"Client-side In our simple web-page, let’s add a JavaScript function to enable the “Submit” button when captcha is solved.\nDiffCode index.html@@ -18,7 +18,13 @@ padding: 20px; } \u003cscript defer src=\"https://cdn.privatecaptcha.com/widget/js/privatecaptcha.js\"\u003e\u003c/script\u003e + \u003cscript type=\"text/javascript\"\u003e + function onCaptchaSolved() { + const submitButton = document.querySelector('#formSubmit'); + submitButton.disabled = false; + } + \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e index.html\u003cscript type=\"text/javascript\"\u003e function onCaptchaSolved() { const submitButton = document.querySelector('#formSubmit'); submitButton.disabled = false; } \u003c/script\u003e and connect this function to the widget itself by adding data-finished-callback attribute:\nindex.html@@ -32,7 +32,7 @@ \u003cform action='/submit' method=\"POST\"\u003e \u003clabel\u003e Email: \u003c/label\u003e \u003cinput type=\"email\" name=\"email\" placeholder=\"Email address\" required /\u003e - \u003cdiv class=\"private-captcha\" data-sitekey=\"xyz\"\u003e\u003c/div\u003e + \u003cdiv class=\"private-captcha\" data-sitekey=\"xyz\" + data-finished-callback=\"onCaptchaSolved\"\u003e\u003c/div\u003e \u003cbutton id=\"formSubmit\" type=\"submit\" disabled\u003e Submit \u003c/button\u003e \u003c/form\u003e \u003c/div\u003e Now client-side should be ready. What is left is only to verify captcha on the server-side.\nServer-side For server-side, we need to add a handler for the form and verify captcha solution.\nCreate a new API key To verify captcha solutions, we need an API key. Head to the portal, open your user’s Settings, then API keys and click “Create new key”.\nAdd code to verify solution After captcha widget has finished solving the puzzle, it adds a hidden form field with solution (defined by data-solution-field attribute).\n\u003cform\u003e \u003c!-- ... --\u003e \u003cinput name=\"private-captcha-solution\" type=\"hidden\" value=\"AAAAAAACAhQEAOiDAAAAAAC...IsoSTgYAAA=\"\u003e \u003c!-- ... --\u003e \u003c/form\u003e To verify solution we need to send a POST request with the contents of this field to /siteverify endpoint and check the result. This is done in the server-side handler of the form.\nNote\nMake sure to use your own API key\nDiffGo main.go@@ -1,11 +1,60 @@ ) +func checkSolution(solution, apiKey string) error { + req, err := http.NewRequest(\"POST\", \"https://api.privatecaptcha.com/siteverify\", strings.NewReader(solution)) + if err != nil { + return err + } + + req.Header.Set(\"X-Api-Key\", apiKey) + + resp, err := http.DefaultClient.Do(req) + if err != nil { + return err + } + defer resp.Body.Close() + + response := struct { + Success bool `json:\"success\"` + // NOTE: other fields omitted for brevity + }{} + + if err := json.NewDecoder(resp.Body).Decode(\u0026response); err != nil { + return err + } + + if !response.Success { + return errors.New(\"solution is not correct\") + } + + return nil +} + func main() { + http.HandleFunc(\"POST /submit\", func(w http.ResponseWriter, r *http.Request) { + const page = `\u003c!DOCTYPE html\u003e\u003chtml\u003e\u003cbody style=\"background-color: %s;\"\u003e\u003c/body\u003e\u003c/html\u003e` + captchaSolution := r.FormValue(\"private-captcha-solution\") + if err := checkSolution(captchaSolution, \"your-api-key\"); err != nil { + fmt.Fprintf(w, page, \"red\") + return + } + fmt.Fprintf(w, page, \"green\") + }) + http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) { if r.URL.Path == \"/\" { http.ServeFile(w, r, \"index.html\") main.goimport ( \"encoding/json\" \"errors\" \"fmt\" \"log\" \"net/http\" \"strings\" ) func checkSolution(solution, apiKey string) error { req, err := http.NewRequest(\"POST\", \"https://api.privatecaptcha.com/siteverify\", strings.NewReader(solution)) if err != nil { return err } req.Header.Set(\"X-Api-Key\", apiKey) resp, err := http.DefaultClient.Do(req) if err != nil { return err } defer resp.Body.Close() response := struct { Success bool `json:\"success\"` // NOTE: other fields omitted for brevity }{} if err := json.NewDecoder(resp.Body).Decode(\u0026response); err != nil { return err } if !response.Success { return errors.New(\"solution is not correct\") } return nil } func main() { http.HandleFunc(\"POST /submit\", func(w http.ResponseWriter, r *http.Request) { const page = `\u003c!DOCTYPE html\u003e\u003chtml\u003e\u003cbody style=\"background-color: %s;\"\u003e\u003c/body\u003e\u003c/html\u003e` captchaSolution := r.FormValue(\"private-captcha-solution\") if err := checkSolution(captchaSolution, \"your-api-key\"); err != nil { fmt.Fprintf(w, page, \"red\") return } fmt.Fprintf(w, page, \"green\") }) // .... } "},"title":"Complete example"},"/docs/tutorials/invisible-captcha/":{"data":{"":"Invisible captcha refers to the situation when you don’t want to show captcha widget for various reasons (e.g. custom UI integraion or design restrictions).","example#Example":"Here’s how a more complete example of the above looks like:\nHTMLJavascript \u003cform\u003e \u003cdiv class=\"private-captcha\" data-sitekey=\"xyz\" data-display-mode=\"hidden\" data-start-mode=\"click\" data-started-callback=\"invisibleCaptchaStarted\" data-finished-callback=\"invisibleCaptchaFinished\"\u003e \u003c/div\u003e \u003cbutton type=\"button\" onclick=\"window.privateCaptcha.autoWidget.execute()\"\u003e \u003csvg id=\"spinner\" ... /\u003e \u003csvg id=\"checkmark\" ... /\u003e Submit \u003c/button\u003e \u003c/form\u003e function invisibleCaptchaStarted() { document.getElementById('spinner').classList.remove('hidden'); document.getElementById('checkmark').classList.add('hidden'); } function invisibleCaptchaFinished(widget) { setTimeout(() =\u003e { document.getElementById('spinner').classList.add('hidden'); document.getElementById('checkmark').classList.remove('hidden'); }, 1500); setTimeout(() =\u003e { widget.reset(); document.getElementById('spinner').classList.add('hidden'); document.getElementById('checkmark').classList.add('hidden'); }, 3000); } Demo You can try the above setup by clicking this button:\nSubmit ","setup#Setup":"To permanently hide the widget, set data-display-mode attribute to hidden.\n\u003cdiv class=\"private-captcha\" data-sitekey=\"xyz\" ... + data-display-mode=\"hidden\" ... \u003e \u003c/div\u003e Additionally, you need to supply callbacks for at least 2 events: data-started-callback and data-finished-callback.\n\u003cdiv class=\"private-captcha\" data-sitekey=\"xyz\" ... + data-started-callback=\"invisibleCaptchaStarted\" + data-finished-callback=\"invisibleCaptchaFinished\" ... \u003e \u003c/div\u003e Triggering solving By default, captcha will begin solving when any input from the parent form will receive input. For example, it will happen when you fill out input fields or click the Submit button.\nHowever, if you want to control when the solving will start, you can set data-start-mode attribute to click and trigger solving captcha using API method execute()."},"title":"Invisible captcha"}}